Ruby on Rails 基礎 - 琉球大学大学院 情報工学実践IV
================================================================================

Ruby on Rails の紹介
--------------------------------------------------------------------------------


### 目次
1. はじめに
2. Ruby on Rails とは
3. 哲学
4. 特徴
5. 世の中に与えた影響
6. 構成


### はじめに

ここでは，Ruby on Rails とは何か？また，世の中に与えた影響，構成について簡単に学ぶ


### Ruby on Rails とは

>"Ruby on Rails（ルビーオンレイルズ）はオープンソースのWebアプリケーションフレームワークである。
>RoRまたは単にRailsと呼ばれる。その名にも示されているようにRubyで書かれている。
>またModel View Controller(MVC)アーキテクチャに基づいて構築されている。

>実アプリケーションの開発を他のフレームワークより少ないコードで簡単に開発できるよう考慮し設計されている。 
>Railsの公式なパッケージはRubyのライブラリやアプリケーションの流通ルートであるRubyGemsにより配布されている。"

> -- via [Ruby on Rails](http://ja.wikipedia.org/wiki/Ruby_on_Rails)


### 哲学

Railsの基本理念は「同じことを繰り返さない」(DRY:Don't Repeat Yourself)と
「設定よりも規約」(CoC:Convention over Configuration)である。

「同じことを繰り返さない」というのは、定義などの作業は一回だけですませろとの意味である。
Railsはフルスタックのフレームワークであり、コンポーネントの統合は手動での設定を必要とせず自動で行われる。

例えばRuby on Railsに組み込みのORMライブラリであるActiveRecordではクラス定義において、
データベースから読み取るべき属性名等を指定する必要はない。
ActiveRecordはRDBMSの表定義から自動的にその情報を取得する。
従ってプログラムとRDBMSの両方にそれを定義するというような無駄な作業を行う必要はない。

*「設定よりも規約」とは、標準的な設定は決まったルールに従い、共通でない部分の設定のみを行うようにするべき、ということである。*

【参考リンク】

* [小飼弾のアルファギークに逢いたい♥：#2　Ruby on Rails作者 David Heinemeier Hansson（前編）　RubyでRailsを書いたわけ][1]
* [小飼弾のアルファギークに逢いたい♥：#2　Ruby on Rails作者 David Heinemeier Hansson（中編）　37signalsってどんな会社？][2]
* [小飼弾のアルファギークに逢いたい♥：#2　Ruby on Rails作者 David Heinemeier Hansson（後編）　「アーキテクト」って言葉を使ったら負け][3]
* [「美しいコードを書けるからRubyを選んだ」---Ruby on Rails作者 David Heinemeier Hansson氏：ITpro][4]
* [翻訳 - Ruby on Rails: David Heinemeier Hanssonへのインタビュー][5]


[1]: http://gihyo.jp/dev/serial/01/alpha-geek/0004
[2]: http://gihyo.jp/dev/serial/01/alpha-geek/0005
[3]: http://gihyo.jp/dev/serial/01/alpha-geek/0006
[4]: http://itpro.nikkeibp.co.jp/article/NEWS/20060620/241346/
[5]: http://capsctrl.que.jp/kdmsnr/wiki/transl/?AnInterviewWithDHH

### 特徴

#### 設定よりも規約（Convention over Configuration）

: Ruby on Rails では冗長な XML による設定ファイルの代わりに，
命名規則とファイル配置を規約として徹底します。これにより，劇的に設定項目を削減します。

#### 根本的に異なるデータベース戦略

: Rails ではプログラムがデータベースの構造を調査し，それに基づいた機能をアプリケーションに適用します。

#### 気の利いたデフォルト値の全面展開

: Ruby はデフォルト値を設定する機能が充実しています。
Rails を使った開発では，共通パラメータを設定する必要はほとんどありません。
しかも，デフォルト値は必要に応じて自由に変更できます。

#### 迅速なフィードバックループ

: Rails での開発では，1行変更したら，ブラウザを再読み込みするだけで変更内容を確認できます。
Java での開発ではたいていの場合に特別なビルドやデプロイ手順が必要になるのとは対照的です。
毎日何度も繰り返す作業を5分短縮することの効果は過小評価されがちですが，見過ごせないものです。

#### Ajax

: Rails は Ajax を利用したアプリケーション構築コストを節減します。
Ajax を使うと，Web アプリケーションをよりインタラクティブにできます。
ユーザに流れるような操作感と，印象に残る使い勝手を提供できます。


### 世の中に与えた影響

設定ファイルを書くことで柔軟さを確保してきた今までの開発手法を DHH は "古い考え方" と言い，
あたかも敷かれたレールを走る（規約に沿った）ような開発手法のほうが良いということを Ruby on Rails で提唱した。
世の中の多くのデベロッパーはこの考え方に賛同し，Ruby 以外でも Rails のような考え方を採用したフレームワークが生まれている。

#### Ruby on Rails の影響を受けたフレームワーク

言語      | フレームワーク
----------|--------------------------------------------------------------------
Python    |Django，Fanery，Subway，TurboGears
Perl      |Catalyst
JavaScript|TrimJunction
PHP       |CakePHP，symfony，Seagull，PHP on TRAX
.NET      |MonoRail
Java      |Wicket，Sails，Trails, Teeda(Seasar2)
Smalltalk |Seaside

-- via [Java から Ruby へ](http://www.oreilly.co.jp/books/9784873113203/)

### 構成

* [ActionPack](http://d.hatena.ne.jp/keyword/ActionPack)
    * [ActionController](http://d.hatena.ne.jp/keyword/ActionController)
    * [ActionView](http://d.hatena.ne.jp/keyword/ActionView)
* [ActiveRecord](http://d.hatena.ne.jp/keyword/ActiveRecord)（[ActiveRecord パターン](http://ja.wikipedia.org/wiki/Active_Record)）
* [ActiveSupport](http://d.hatena.ne.jp/keyword/ActiveSupport)
* [ActionMailer](http://d.hatena.ne.jp/keyword/ActionMailer)
* [ActiveWebService](http://d.hatena.ne.jp/keyword/ActionWebService)
* [railties](http://d.hatena.ne.jp/keyword/railties)

![構成図](images/rails_system.gif)



【参考リンク】

* [非エンジニアにRails2.0を説明する -2 | poqu.log](http://blog.poqu.org/2008/01/17/rails-2/)


<div><%= @disqus %></div>
