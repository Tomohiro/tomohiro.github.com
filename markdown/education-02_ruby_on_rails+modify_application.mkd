Ruby on Rails 基礎 - 琉球大学大学院 情報工学実践IV
================================================================================

応用 - Web アプリケーション開発
--------------------------------------------------------------------------------


### 目次

1. はじめに
2. ジャンルをコンボボックスで登録，一覧画面で参照できるようにする
3. バリデーション


### はじめに

これまで作成した簡単なアプリケーションを改造して，より Ruby on Rails らしい
開発方法に触れてみよう

### ジャンルをコンボボックスで登録，一覧画面で参照できるようにする

ジャンルの ID を数値でて入力するのは面倒くさい。そこで，コンボボックスを使って，簡単に登録できるようにしてみよう

1. コンボボックスは，HTML の SELECT タグで実現できる

    Rails では，SELECT タグを簡単に作成できるヘルパーメソッドが用意されている

    【参考リンク】

    * [Rails API: select](http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html)

2. Helper を書く

        $ vi app/helpers/cds_helper.rb
>     1 module CdsHelper
>     2   #
>     3   # ジャンル一覧を SELECT リスト形式で返す
>     4   #
>     5   def genre_list
>     6     Genre.find(:all).collect { |p| [p.name, p.id] }
>     7   end
>     8 end

3. 新規作成画面を編集

        $ vi app/views/cds/new.html.erb
>     # 16行目を書き換える
>     <%= select("cd", "genre_id", genre_list) %>

4. 編集画面を編集

        $ vi app/views/cds/edit.html.erb
>     # 16行目を書き換える
>     <%= select("cd", "genre_id", genre_list) %>

5. テーブルの関連付けを行う

    *CD モデルを変更*

        $ vi app/models/cd.rb
>     1 class Cd < ActiveRecord::Base
>     2   belongs_to :genre # 関連付けたいモデル genre を定義
>     3 end

    *ジャンルモデルを変更*

        $ vi app/models/genre.rb
>     1 class Genre < ActiveRecord::Base
>     2   has_many :cds # 関連付けたいモデル cds を定義(複数形になっているので注意)
>     3 end

6. 詳細参照画面を編集

        $ vi app/views/cds/show.html.erb
>      # 13行目を書き換える
>      <%=h @cd.genre.name %>

7. 一覧画面を編集

        $ vi app/views/cds/index.html.erb
>      # 17行目を書き換える
>      <td><%=h cd.genre.name %></td>

8. Rails のテーブル間の結び付きについて

【参考リンク】

* [Associations](http://wota.jp/ac/?date=20060120)


### バリデーション

プログラムでトラブルが起こらないように，入力値のチェック（バリデーション）は必ず行う必要がある

1. バリデーションって何？

    正しい結果になるかどうかを検査すること。妥当性検証。

    【参考リンク】

    * [バリデーション](http://kotobank.jp/word/%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3)

2. CD 登録の入力チェックを行う

        $ vi app/models/cd.rb
>     1 class Cd < ActiveRecord::Base
>     2   belongs_to :genre
>     3
>     4   validates_presence_of :artist, :title, :year, :message => 'は必須入力です。'
>     5   validates_numericality_of :year, :message => 'は数字で入力してください'
>     6 end

3. ジャンル登録の入力チェックを行う

        $ vi app/models/genre.rb
>     1 class Genre < ActiveRecord::Base
>     2   has_many :cds
>     3
>     4   validates_presence_of :name, :message => 'は必須入力です。'
>     5 end


<div><%= @disqus %></div>
